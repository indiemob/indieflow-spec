openapi: 3.0.0
info:
  title: indieflow
  description: |
    Asynchronous step-based task flow API.
    
    Create automated workflows that will react to the output of your API responses through webhooks,
    allowing you to design behind-the-scenes processes both in parallel and in pipeline.

    <img src="./diagram.gif" width="800" />

    Example (this is on YAML format for readability purposes)

    ```
    name: foo_request_signature
    webhook:
      url: https://mysite.com/hook
    steps:
      foo_request_submitted:
        triggers:
          success:
          - email_notify_parties
      email_notify_parties:
      party_a_signs:
        depends_on:
          email_notify_parties: success
        triggers:
          success:
          - send_signed_email_confirmation
      party_b_signs:
        depends_on:
          email_notify_parties: success
        triggers:
          success:
          - send_signed_email_confirmation
      send_signed_email_confirmation: # This step won't execute until all dependencies are met
        depends_on:
          party_a_signs: success
          party_b_signs: success
    ```
  version: 0.0.1
servers:
- url: https://api.indieflow.app/v1
  description: Production server
- url: https://api.dev.indieflow.app/v1
  description: Development server
security:
- api_key: []
paths:
  /flow/definition:
    get:
      summary: Retrieves the flow list
      operationId: flow_definition_get
      parameters:
      - name: limit
        in: query
        description: Page size
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: offset
        in: query
        description: Page starting record
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Returns the list of flows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredFlowsResponse'
        "400":
          description: The form contains validation errors (status will be `validation_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: A generic error has occurred (status will be `generic_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
    post:
      summary: Creates a new flow definition
      operationId: flow_definition_post
      requestBody:
        description: Information about the flow to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlowDefinition'
        required: true
      responses:
        "200":
          description: "The flow was successfully created, returns the id of the flow\
            \ record"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowDefinitionResponse'
        "400":
          description: The form contains validation errors (status will be `validation_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: A generic error has occurred (status will be `generic_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
  /flow/definition/{id}:
    get:
      summary: Retrieves the flow definition detail
      operationId: flow_definition_id_get
      parameters:
      - name: id
        in: path
        description: The flow definition id or name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The flow detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowDefinitionResponse'
        "404":
          description: The flow definition record was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
    put:
      summary: Updates flow definition
      description: |
        Updates an existing flow definition, you can just pass the root attributes you wish to update and it wont affect the existing values.

        NOTE: For updating steps you need to send the whole object with the changes you want to make because that will get overwritten.
      operationId: flow_definition_id_put
      parameters:
      - name: id
        in: path
        description: The flow definition id or name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The flow detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowDefinitionResponse'
        "404":
          description: The flow definition record was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
  /flow/submit:
    post:
      summary: Submits a flow execution
      operationId: flow_submit_post
      requestBody:
        description: Information about the flow to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlowSubmissionRequest'
        required: true
      responses:
        "200":
          description: "The flow was successfully created, returns the id of the flow\
            \ record"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowSubmissionResponse'
        "400":
          description: The form contains validation errors (status will be `validation_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: A generic error has occurred (status will be `generic_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
      callbacks:
        step_execution:
          'https://mysite.com/hooks/indieflow':
            post:
              description: >
                This webhook is called when a step execution is in progress.
                
                
                **This is the meat of indieflow, here you implement your step logic and return the outcome that will be used as a decision to execute subsecuent steps**


                NOTE: `https://mysite.com/hooks/indieflow` is a just a placeholder
                for whatever webhook url you set when creating/updating the flow definition
                
                
                **Signature verification:**
                In order to verify the signature comes from the right origin, you need to do the following steps:
            
                * Create an object containing `context` and `data` and convert it to a json string
                * SHA256 hexdigest the json string alongside the `signature_key`
                * The result should match the incoming `signature`


                **Example:**
  
  
                ```ruby

                require 'json'
  
                require 'digest'
                
                body = JSON.parse(request.body.read)

                payload = {
                  context: body['context'],
                  data: body['data']
                }
                
                built_signature = Digest::SHA256.hexdigest("#{payload.to_json}#{signature_key}")

                built_signature == body['signature'] # if equal, incoming request is trustworthy

                ```
              requestBody:
                description: Information about the webhook payload
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/StepExecutionWebhookPayload'
              responses:
                "200":
                  description: The webhook expected result
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/StepExecutionResult'
              
  /dead_letter:
    get:
      summary: Retrieves the steps that failed to execute
      operationId: dead_letter_get
      parameters:
      - name: limit
        in: query
        description: Page size
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: offset
        in: query
        description: Page starting record
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Returns the list of failed steps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeadLetterRecordsResponse'
        "400":
          description: The form contains validation errors (status will be `validation_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: A generic error has occurred (status will be `generic_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
    delete:
      summary: Deletes ALL the steps from the dead letter
      description: |
        Deletes ALL the steps from the dead letter.

        NOTE: WARNING, once deleted, you will NOT be able to get these records back
      operationId: dead_letter_delete
      responses:
        "200":
          description: Returns a simple response with the deleted step count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeadLetterAffectedRecordsResponse'
        "500":
          description: A generic error has occurred (status will be `generic_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
  /dead_letter/{id}:
    post:
      summary: Flushes (re-attempts) to run the given step from the dead letter
      description: |
        Re-attempts to run the given step from the dead letter.

        NOTE: This will count as a submission request
      operationId: dead_letter_id_post
      parameters:
      - name: id
        in: path
        description: The dead letter record id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the reattempted dead letter record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeadLetterRecordResponse'
        "404":
          description: The dead letter record was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: A generic error has occurred (status will be `generic_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
    delete:
      summary: Deletes the given step from the dead letter
      description: |
        Flushes (deletes) the given step from the dead letter
      operationId: dead_letter_id_delete
      parameters:
      - name: id
        in: path
        description: The dead letter record id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the deleted dead letter record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeadLetterRecordResponse'
        "404":
          description: The dead letter record was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: A generic error has occurred (status will be `generic_error`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: "{{ controller_source }}"
components:
  schemas:
    AnyData:
      description: Schema that represents any serializable data
      oneOf:
      - type: string
      - type: object
      - type: integer
      - type: boolean
    ResponseStatus:
      type: string
      description: |
        The response status returned from the server, it can be:
        * success: The request worked as expected
        * error: The request returned an error
      enum:
      - success
      - error
    ResponseExitCode:
      type: string
      description: |
        The response exit code returned from the server, it can be:
        * success: The request worked as expected
        * validation_error: The request contains an user input related error
        * unauthorized: Invalid credentials
        * generic_error: The request contains a generic error
        * service_down: The backend server is down
        * flow_disabled: The requested flow is currently marked as disabled
      enum:
      - success
      - validation_error
      - unauthorized
      - generic_error
      - service_unavailable
      - resource_not_found
      - step_already_executed
      - flow_disabled
    StepExecutionExitCode:
      type: string
      description: |
        Enum that indicates the possible exit codes a step execution might have:
        * success: When a step execution worked as expected
        * failed: When the user explicitly indicates the execution had a negative outcome
        * noop: Short for NO-Operation, when a step execution executed but did nothing
        * error: When a step execution executed with errors. This exit code will automatically send the message to the dead-letter in order to be reattempted at a later time.
      enum:
      - success
      - failed
      - noop
      - error
    FlowDefinitionStatus:
      type: string
      description: Indicates wether the flow is turned on or turned off
      enum:
      - active
      - inactive
    SimpleResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        exit_code:
          $ref: '#/components/schemas/ResponseExitCode'
        data:
          $ref: '#/components/schemas/AnyData'
      description: A simple response representation
    PaginatedData:
      description: Base response object containing the record set and record count
      type: object
      properties:
        record_count:
          description: The number of records in the given context
          type: integer
        records:
          description: The record set
          type: array
          items:
            type: object
    ErrorResponse:
      allOf:
      - $ref: '#/components/schemas/SimpleResponse'
      - type: object
        properties:
          error:
            type: string
            description: Message describing the error
        description: A response that shows the user that an error has occurred
    ValidationErrorResponse:
      allOf:
      - $ref: '#/components/schemas/ErrorResponse'
      - type: object
        properties:
          validation_errors:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
            description: Validation errors specific to the input
        description: A response that shows the user any input validation errors
    StepDefinition:
      type: object
      properties:
        repeatable:
          type: boolean
          description: Boolean flag to indicate that this step can be run multiple
            times within the same flow
          default: false
        depends_on:
          type: object
          additionalProperties:
            type: string
          description: |
            Indicates the required steps along with their respective exit codes that need to be met in order for this step to run. Example:
            ```
            # step_b depends on step_a being executed with a success exit code
            # step_c depends on step_b being executed with a success OR noop exit code
            # step_d depends on step_b and step_c being executed with a success exit code

            step_a:
               ...
            step_b:
              depends_on:
                step_a: success
            step_c:
              depends_on:
                step_b: success, noop
            step_d:
              depends_on:
                step_b: success
                step_c: success
            ```
        triggers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: |
            Indicates that after the execution of the step returing a certain exit code it will attempt to execute a following step. Example:
            ```
            # After step_a executes with an exit code of success it will attempt to execute step_b
            # A request to execute step_b has been received, since the dependencies have been meet it will execute it
            # If step_b executes with an exit code of success OR noop it will attempt to execute step_c

            step_a:
              triggers:
                success:
                  - step_b
            step_b:
              depends_on:
                step_a: success
              triggers:
                success, noop:
                  - step_c
            step_c:
            ```
      description: The step definition
      nullable: true
    Webhook:
      type: object
      properties:
        url:
          type: string
          description: "The webhook endpoint, must be https"
        signature_key:
          type: string
          description: Key to ensure data authenticity (generated automatically)
      description: Contains information about the target endpoint that will be acting
        as a webhook
    StepExecutionWebhookPayload:
      type: object
      properties:
        context:
          $ref: '#/components/schemas/StepExecutionContext'
        data:
          type: object
          additionalProperties: true
          description: Additional information sent by the user
        signature:
          type: string
          description: >
            The verification signature of the webhook call, in order to verify the signature comes from the right origin, you need to do the following steps:
            
            * Create an object containing `context` and `data` and convert it to a json string
            * SHA256 hexdigest the json string alongside the `signature_key`
            * The result should match the incoming `signature`
      description: The payload that the webhook will be sending
    FlowDefinitionRecord:
      type: object
      properties:
        id:
          type: string
          description: The flow definition identifier
        name:
          description: |
            The flow name, it must follow the following regexp:
            `^[a-zA-Z_$][a-zA-Z_$0-9]*$`
        description:
          type: string
          description: A brief description of what this flow is about
        created_at:
          type: integer
          description: When was this flow created
        updated_at:
          type: integer
          description: When was this flow updated
        status:
          $ref: '#/components/schemas/FlowDefinitionStatus'
      description: Overall information of a registered flow
    FlowDefinition:
      type: object
      properties:
        id:
          type: string
          description: The flow definition identifier
        name:
          description: |
            The flow name, it must follow the following regexp:
            `^[a-zA-Z_$][a-zA-Z_$0-9]*$`
        description:
          type: string
          description: A brief description of what this flow is about
        webhook:
          $ref: '#/components/schemas/Webhook'
        steps:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/StepDefinition'
          description: |
            Key-Value pair object that contains the steps that will consist on this workflow, the object Key must follow the following regexp: `^[a-zA-Z_$][a-zA-Z_$0-9]*$`

            NOTE: If you want to define a step with no additional configuration you can just define the step name with a null value. Example:

            ```
            "steps": {
              "step_with_no_attributes": null
            }
            ```
        created_at:
          type: integer
          description: When was this flow created
        updated_at:
          type: integer
          description: When was this flow updated
        status:
          $ref: '#/components/schemas/FlowDefinitionStatus'
      description: Contains the flow definition
    StepExecutionContext:
      type: object
      properties:
        request_id:
          type: string
          description: The execution request identifier
        flow_id:
          type: string
          description: The workflow subject identifier
        flow_name:
          type: string
          description: The workflow subject
        step_name:
          type: string
          description: The step name belonging to the flow
      description: Contains information about the context of the step execution
    StepExecutionResult:
      type: object
      properties:
        exit_code:
          $ref: '#/components/schemas/StepExecutionExitCode'
        data:
          type: object
          additionalProperties: true
          description: "Output data (optional, size is limited to 1kb)"
      description: The expected result of the step execution webhook call
    FlowSubmissionRequest:
      type: object
      properties:
        flow_name:
          type: string
          description: The name of the flow we want to run
        flow_id:
          type: string
          description: The flow subject identifier
        step_name:
          type: string
          description: The name of the flow step we want to run
        data:
          type: object
          additionalProperties: true
          description: Any additional data we want to send (size is limited to 1kb)
      description: The information about the flow that will get submitted
      required:
      - flow_name
      - flow_id
      - step_name
    FlowSubmissionResponse:
      allOf:
      - $ref: '#/components/schemas/SimpleResponse'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/FlowSubmissionRequest'
          request_id:
            type: string
            description: The generated request id
        description: The response of the flow submission request
    DeadLetterRecord:
      type: object
      properties:
        id:
          type: string
          description: The dead letter record identifier
        context:
          $ref: '#/components/schemas/StepExecutionContext'
        error:
          type: string
          description: Information about the issue that caused this step to end up
            in dead letter
        additional_info:
          type: object
          additionalProperties: true
          description: Additional information
      description: Overall view of a failed step execution that ended up in dead letter
    HttpRequest:
      type: object
      properties:
        url:
          type: string
          description: The request url
        method:
          type: string
          description: The http method used
        headers:
          type: object
          additionalProperties: true
          description: The request headers
        query_params:
          type: object
          additionalProperties: true
          description: Query parameters
        body:
          type: object
          additionalProperties: true
          description: The request body
      description: An object containing an http request
    HttpResponse:
      type: object
      properties:
        status:
          type: integer
          description: The response HTTP status
        headers:
          type: object
          additionalProperties: true
          description: The response headers
        body:
          type: object
          additionalProperties: true
          description: The response body
      description: An object containing an http response
    WebhookRequestLog:
      type: object
      properties:
        context:
          $ref: '#/components/schemas/StepExecutionContext'
        request:
          $ref: '#/components/schemas/HttpRequest'
        response:
          $ref: '#/components/schemas/HttpResponse'
        created_at:
          type: integer
          description: The timestamp when was this request performed
      description: Information about the webhook request for logging purposes
    RegisteredFlowsResponse:
      allOf:
      - $ref: '#/components/schemas/SimpleResponse'
      - type: object
        description: The record set of registered flows
        properties:
          data:
            allOf:
            - $ref: "#/components/schemas/PaginatedData"
            - type: object
              properties:
                records:
                  type: array
                  items:
                    $ref: "#/components/schemas/FlowDefinitionRecord"
    FlowDefinitionResponse:
      allOf:
      - $ref: '#/components/schemas/SimpleResponse'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/FlowDefinition'
        description: Successful response after creating or retrieving a flow definition
    GetDeadLetterRecordsResponse:
      allOf:
      - $ref: '#/components/schemas/SimpleResponse'
      - type: object
        description: The record set of dead letter records
        properties:
          data:
            allOf:
            - $ref: "#/components/schemas/PaginatedData"
            - type: object
              properties:
                records:
                  type: array
                  items:
                    $ref: "#/components/schemas/DeadLetterRecord"
    DeadLetterAffectedRecordsResponse:
      allOf:
      - $ref: '#/components/schemas/SimpleResponse'
    DeadLetterRecordResponse:
      allOf:
      - $ref: '#/components/schemas/SimpleResponse'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/DeadLetterRecord'
        description: The record set of registered flows
  parameters:
    limit:
      name: limit
      in: query
      description: Page size
      required: false
      style: form
      explode: true
      schema:
        type: integer
    offset:
      name: offset
      in: query
      description: Page starting record
      required: false
      style: form
      explode: true
      schema:
        type: integer
  securitySchemes:
    api_key:
      type: apiKey
      name: X-Api-Key
      in: header
      x-apikeyInfoFunc: "{{ check_api_key_fn }}"
